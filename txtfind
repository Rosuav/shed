#!/usr/bin/env python3
'''
Progressive text search
- Give it a file name
- Type letters/digits/apostrophe, or space, or punctuation, or Enter/Up/Down
- If letter/digit, add to search term
- If space, add separator
- If punctuation, add to filter? maybe? Hyphen requires hyphen, double quote allows any quote (incl backtick b/c people), comma allows semicolon
- Enter/Down = next, Up = prev. Reset to start on search change? Or keep position (not index)?
  - Currently keeps index. This is unideal.
- Search for a sequence of words. They may be separated by any amount of non-newline whitespace, punctuation, etc.
- Two newlines is a hard separator - no hit crosses that boundary
  - Not yet implemented
- Match based on Unicode casefold, but show the original
- Search term <<i'm sure i can't be mabel>> finds Alice falling down rabbit hole despite line break
- Search term <<"a dog's not mad>> finds the conversation with the Cat - even though it's opened with a single quote
'''
import curses
import sys
import re

CONTEXT_LINES = 3 # Or should this be adjustable?

if len(sys.argv) < 2:
	sys.exit(1, "USAGE: %s filename" % sys.argv[0])
with open(sys.argv[1]) as f:
	textfile = f.read()

if 0:
	tracefile = open("/tmp/txtfind.log", "w")
	def trace(*a, **kw): print(*a, **kw, file=tracefile, flush=True)
else:
	def trace(*a, **kw): pass

handlers = { }
def keyhandler(*keys):
	def wrapper(func):
		for key in keys: handlers[key] = func
		return func
	return wrapper

def keyrange(start, end):
	# Or should this record the range and do inequality checks??
	return keyhandler(*(chr(k) for k in range(ord(start), ord(end) + 1)))

search = ""
skip_matches = 0

@keyhandler("KEY_UP")
def scroll_up(key):
	global skip_matches
	if skip_matches: skip_matches -= 1

@keyhandler("KEY_DOWN", "\n")
def scroll_up(key):
	global skip_matches
	skip_matches += 1

@keyrange("A", "Z")
@keyrange("a", "z")
@keyrange("0", "9")
@keyhandler("'", " ", '"', ".", "!", ",", "-", ";")
def search_char(key):
	global search
	search += key

@keyhandler("KEY_BACKSPACE")
def search_unchar(key):
	global search
	if search: search = search[:-1]

TRANSFORMS = {
	# TODO: Instead of "\W+" as the gap, allow any sequence of non-word
	# characters (including newlines) EXCEPT if it contains two newlines
	# in succession. So "),\n" would match, but ").\n\n" wouldn't. Can
	# this be done with a regex assertion?
	ord(' '): r"\W+",
	ord('"'): "['\"`]",
	ord('.'): r"\.",
	ord(','): r"[,;]",
}

def main(stdscr):
	curses.set_escdelay(25) # What's the smallest timeout that won't result in spurious exits?
	stdscr.clear()
	curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
	found_text = curses.color_pair(1) | curses.A_BOLD
	curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
	separator = curses.color_pair(2) | curses.A_BOLD
	while True:
		regex = search.translate(TRANSFORMS)
		stdscr.move(0, 0)
		if regex:
			try:
				pos = need_context = skipped = 0
				for match in re.finditer(regex, textfile, re.I):
					if skipped < skip_matches:
						skipped += 1
						continue
					# Inefficient, but I don't care :)
					before = textfile[pos:match.start()]
					lines = before.split("\n")
					if len(lines) < CONTEXT_LINES + need_context:
						# A nearby match. The contexts meet.
						stdscr.addstr(before)
					else:
						# A distant match. If there's a previous search, give its After context,
						# and always give our Before context.
						for line in lines[:need_context]:
							stdscr.addstr(line + "\n")
						stdscr.addstr("--\n", separator)
						for line in lines[-CONTEXT_LINES:-1]:
							stdscr.addstr(line + "\n")
						stdscr.addstr(lines[-1]) # Last one, leave cursor on the same line
						need_context = CONTEXT_LINES
					stdscr.addstr(textfile[match.start():match.end()], found_text)
					pos = match.end()
					if stdscr.getyx()[0] >= stdscr.getmaxyx()[0] - CONTEXT_LINES - need_context: break
				for line in textfile[pos:].split("\n")[:need_context]:
					if stdscr.getyx()[0] >= stdscr.getmaxyx()[0] - 1: break
					stdscr.addstr(line + "\n")
				if stdscr.getyx()[0] < stdscr.getmaxyx()[0] - 1: stdscr.addstr("--\n", separator)
			except curses.error:
				# If we try to add too much text, it'll bomb.
				# Ideally, just suppress that one error, but
				# for simplicity, we'll just stop on any.
				pass
		stdscr.clrtobot()
		stdscr.addstr(curses.LINES - 1, 0, "> " + search, curses.A_BOLD)
		stdscr.clrtoeol()
		stdscr.refresh()
		key = stdscr.getkey()
		if key == "\x1b": break
		func = handlers.get(key)
		if func: func(key)
		else: trace("Unknown key %r" % key)

curses.wrapper(main)
