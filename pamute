#!/usr/bin/env python3

# Mute a single application through PulseAudio
# Can be run over SSH, and should make swift work of those crashed-but-noisy programs.
# Requires Python 3.5 or better.

import re
import subprocess
import sys

if len(sys.argv) < 2:
	print("USAGE: pamute application_name [1|0]", file=sys.stderr)
	sys.exit(1)

app = sys.argv[1].casefold()
status = None # toggle

if len(sys.argv) > 2:
	if sys.argv[2] in ("1", "0"):
		status = sys.argv[2]
	else:
		... # TODO: Be more flexible

info = subprocess.run(["pacmd", "list-sink-inputs"], check=True, stdout=subprocess.PIPE, encoding="utf-8").stdout
ignore = False
program_names = {}
for line in info.split("\n"):
	if line.startswith("\t") and not ignore:
		# Continuation line. If it starts with "\t\t", it's a nested continuation.
		if line.startswith("\tmuted: "):
			muted = line == "\tmuted: yes"
		m = re.match('\t\tapplication.(name|icon_name|process.binary) = "(.*)"$', line)
		if not m: continue
		prog = m.group(2).casefold()
		if prog not in program_names:
			if app == "--list": print(prog)
			program_names[prog] = index
		if prog == app:
			print("Matched on", m.group(1))
			ignore = True # Skip to the next index line
			if status is None:
				if muted is None:
					print("Unable to toggle mute status - mutedness unknown")
					print("Probable internal error")
					sys.exit(1)
				mute = "10"[muted]
			else: mute = status
			subprocess.run(["pacmd", "set-sink-input-mute", index, mute], check=True)
			if mute == "1": print("Muted.")
			else: print("Unmuted.")
	else:
		if "index:" in line:
			index = line.split("index:")[1]
			muted = None
			ignore = False
