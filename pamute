#!/usr/bin/env python3

# Mute/sink-shift a single application through PulseAudio
# Can be run over SSH, and should make swift work of those crashed-but-noisy programs.
# Requires Python 3.5 or better.

# If this is called as 'pamute', it implies '--mute' by default. If called as 'pasink',
# implies '--sink'. Either way, can either toggle or set to an explicit status (eg
# "pamute programname 1" will ensure that it is muted).

import os
import re
import subprocess
import sys

prog = os.path.basename(sys.argv[0])
mode = {"pamute": "mute", "pasink": "sink"}.get(prog)
app = status = None

for arg in sys.argv[1:]:
	if arg == "--mute": mode = "mute"
	elif arg == "--sink": mode = "sink"
	elif app is None: app = arg.casefold()
	elif arg in ("0", "1"): status = arg # TODO: For pasink, allow higher numbers (but don't conflict with PID detection)
if not mode:
	print("USAGE: %s {--mute,--sink} application_name [1|0]" % prog, file=sys.stderr)
	sys.exit(1)
if not app:
	# Normally it'll be called with a program name that specifies the action, so don't
	# clutter the usage info with --mute/--sink.
	print("USAGE: %s application_name [1|0]" % prog, file=sys.stderr)
	sys.exit(1)

if app == "--complete":
	if len(sys.argv) >= 5: completeme = sys.argv[3]
	else:
		# Set up tab completion (may need sudo)
		# Borrowed from steamguard
		# Not guaranteed to work on any non-Linux system. Might work on
		# other Unices but I haven't tested it.
		path = subprocess.check_output(["pkg-config", "--variable=completionsdir", "bash-completion"])
		path = path.decode("ascii").strip() # Non-ASCII path? I'll figure it out if it ever happens.
		os.makedirs(path, exist_ok=True)
		with open(path + "/pamute", "w") as f:
			print("complete -C 'pamute --complete' pamute", file=f)
		with open(path + "/pasink", "w") as f:
			print("complete -C 'pasink --complete' pasink", file=f)
		print("Tab completion configured.")
		sys.exit(0)

info = subprocess.run(["pacmd", "list-sink-inputs"], check=True, stdout=subprocess.PIPE, encoding="utf-8").stdout
ignore = False
program_names = {}
for line in info.split("\n"):
	if line.startswith("\t") and not ignore:
		# Continuation line. If it starts with "\t\t", it's a nested continuation.
		if line.startswith("\tmuted: "):
			muted = line == "\tmuted: yes"
		m = re.match('\tsink: ([0-9]+) ', line)
		if m: sink = int(m.group(1))
		m = re.match('\t\tapplication.(name|icon_name|process.binary|process.id) = "(.*)"$', line)
		if not m: continue
		prog = m.group(2).casefold()
		if prog not in program_names:
			if app == "--list": print(prog)
			elif app == "--complete" and prog.startswith(completeme): print(prog)
			program_names[prog] = index
		if prog == app:
			print("Found", m.group(1), prog, end="... ")
			ignore = True # Skip to the next index line
			current = muted if mode == "mute" else sink
			if status is None:
				if current is None:
					print("Unable to toggle status - current state unknown")
					print("Probable internal error")
					sys.exit(1)
				# For mute, it's always a toggle. For sink, if you have three or more,
				# "toggle" will always set to sink 0 if it's not 0, else 1.
				new = "01"[not current]
			else: new = status
			if mode == "mute":
				subprocess.run(["pacmd", "set-sink-input-mute", index, new], check=True)
				if mute == "1": print("Muted.")
				else: print("Unmuted.")
			else:
				message = subprocess.run(["pacmd", "move-sink-input", index, new],
					check=True, capture_output=True, encoding="UTF-8").stdout.strip()
				if message: print(message) # It will print to stdout but doesn't return failure.
				else: print("Sent to sink", new)
	else:
		if "index:" in line:
			index = line.split("index:")[1]
			muted = sink = None
			ignore = False
