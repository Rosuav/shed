Python syntax quiz

https://docs.google.com/forms/d/e/1FAIpQLScx9h_lLiFGLTL6QcUN-t6JIngGsUospR6sY2C1lr6aCwjTRA/viewform

NOTE: All questions are to be answered based solely on your own knowledge. Looking up documentation, or testing things in the REPL, is considered cheating. This quiz is purely for entertainment purposes, and you will not be judged in any way.

NOTE: These questions are correct for reasonably current versions of Python (say, 3.12 and onwards). Anything may change in the future.

* Which of these is a valid integer literal? 1_000__000__0000, 0_0, 01234, 0xCOFFEE
* Which of these is NOT a valid string literal? Rf"Radio Frequency", br"Brazil", U"and Me", fU"U+1F595"
* Lambda functions can have local variables. True or false?
* a+b may call which of the following functions: (Multiple correct answers) a.__dict__["__add__"](b), type(a).__add__(a, b), type(b).__radd__(b, a), type(b).__add__(a)
* Python has: More kinds of parameters than arguments; The same number of each; More kinds of arguments than parameters
* Which of the following is a valid f-string: f"{lambda: 1}" f"{{1:1}[1]}" f"{{1:1}}" f"{1: lambda}"
* What exception will math.floor(1e1000) raise? ValueError, OverflowError, OutOfMemoryException, TypeError
* Easy one: Which of these is valid Python code? idlelib.idle = "Eric"; spam * 3 + eggs; if violence in system: raise BeingRepressed(); def clinic(*argument): "Room 12A"
* One of these will raise an exception. Which? match = 1 (SyntaxError); True + False (ValueError); {0}[0] (TypeError); print(exit) (SystemExit)
* Which of these is NOT a statement: nonlocal x, type spam = ham, yield eggs(), break 2
* You can destroy any Python object with the syntax "del objectname". True or false?
* It's nice to do more than one thing at once. Which of these is legal? (Multiple correct answers) from module import name1, name2, name3; with obj1 as x, obj2 as y; for x, y in stuff; except ValueError, TypeError
* What is the risk in using files without a context manager (eg open(fn).read())? Guido van Rossum will send you a letter of disappointment; The file might not be closed before you continue on; The file might only be partially read; Large files might cause a deadlock
* Negative numbers are just WEIRD, they don't make any sense! Which of these expressions will succeed? range(-2); math.sqrt(-2); [-2] * -2; (-1, -2,) -3
* Python 2 was officially sunset years ago, but one feature from it was added into the Python 3 branch and is still valid today. Is it: Using print without parentheses; Putting a u'...' prefix on Unicode strings; Raising a string as an exception; Putting an L suffix on long integers
* One of these is not valid in a match block: case 1 | 2 | 3: case signal.SIGINT: case len("spam"): case otherwise:
* The underscore is special. How special? (Multiple correct answers) Class members starting with an underscore cannot be used from outside the class; Names beginning with an underscore aren't star-imported; "case _:" in a match statement does less work; Module names containing underscores are invalid
* Even without third-party libraries, Python is quite internet-capable. What can you do with just the standard library? Build a web server; Fetch pages via HTTPS; Send emails; Use CSS to change the colour of print statements
* What is the return value from this function?
    def spam():
      try: 1/0
      except: return 1
      else: return 2
      finally: return 3
      return 4
* What will this print?
x = 1
class x:
   x = 2
   def f():
      print(x)
   f()
   print(x)
1 1, 2 2, 1 2, 2 1



Python offers several ways to generate random numbers. Which of these would be a viable way to simulate rolling a six-sided dice? random.randint(6); random.randrange(1, 6); random.randrange(6) + 1; random.choice("d6")
In which module would you find the Counter class? itertools; collections; enum; array
The robot face emoji [:] has what effect on a list? (Example: items = [1, 2, 3]; something = items[:]) It reverses the list in-place, and returns None; It returns a copy of the list, independent of the original list; It returns every second element of the list; Nothing - that's not legal syntax
This code has a problem. What is the solution?
  stuff = {1:2, 3:4, 5:6, 7:8, 9:0}
  for key in stuff:
    if key < 4: del stuff[key]
 - You can't iterate over a dictionary like that. Use "for key in stuff.keys():" instead.
 - You can't delete from what you're iterating over. Use "for key in list(stuff):" instead.
 - Deleting from dictionaries is done with a method. Use "stuff.remove(key)" instead.
 - You can't put a statement on the same line as an "if". Break it before the word "del".
Tuples and lists are extremely similar. What is an important difference between them? (Multiple correct answers)
 - Lists can't be unpacked, only tuples can
 - You can't replace elements in a tuple with "stuff[x] = y"
 - Tuples can be compared for equality, lists can't
 - Tuples, but not lists, can be used as dictionary keys

Select the valid int literal: 1_000, 1e000, 1000j, 0011
Select the valid float literal: 3+4j, 10000000000000000000000000000000, 1.2.3, 001e100
Select the valid str literal: r"I like /slashes\", u"/ So \ do / I \", """ More \\ Slashes // Please """, "123\u/321"
Select the valid bytes literal: b"x\x/x" br"Brazil?" fb"Format{string}" ub"Undefined behaviour"
Comprehensions are a very useful way to build up collections. Which of these is true? (Multiple correct answers; slightly tricky)
 - type( [i*i for i in range(10)] ) is list
 - type( (i*i for i in range(10)) ) is tuple
 - type( {i*i for i in range(10)} ) is set
 - type( <i*i for i in range(10)> ) is vector

What happens if you write a whole function on one line, like this?
  def frobnicate(): print("frooooooob"); return 42
 - Python won't complain, but you might have other programmers yell at you
 - SyntaxError "Invalid syntax"
 - IndentationError "Expected an indented block"
 - TypeError "No return value specified, assuming None"
Python's operators are happy to work with a variety of different types. Which of these is NOT valid?
 - [1, 2, 3] + [4, 5, 6]
 - "This string has five words" / " "
 - "spam" * 30
 - 300 - 1.0
Which of these is a keyword, and thus cannot be used as a variable name?
 - print = "paper"
 - str = ""
 - class = "mathematics"
 - match = "made in heaven"
What will this code print?
  a = b = []
  a.append(42)
  print(len(b))
 - 0
 - 1
 - SyntaxError on the assignment
 - AttributeError on the append
What exception will this raise?
  if not __debug__:
    assert 1 == 2
 - AssertionError because 1 isn't equal to 2
 - SyntaxError because you need a description after the assertion
 - NameError because __debug__ hasn't been assigned to
 - No error at all, this code is fine

Python programmers use emojis in several different ways. Which of these is true?
 - The walrus operator is the new and preferred way to do all variable assignment: a := b
 - The poop emoji can be used for tainted data: ðŸ’© = input()
 - The cat-smile emoji can be used to signal your appreciation of felines: print("Purrrrrrrrr" [:-3] )
 - Calling a function with a smiley face makes it happier: print(<3)
What does this code do?
  from math import *
  from logging import *
  warn("Something's wrong here, this should be about two: %f", log(7.5))
 - It logs a warning, citing the number 2.014903
 - It's silent - warnings aren't displayed by default
 - TypeError, that's not taking the logarithm of 7.5
 - A warning because the warn() function is deprecated
What will this print? (Slightly tricky, be careful)
  def deco(n):
    print(1)
    def deco(f):
      print(2)
      def func(p):
        print(3)
      return func
    return deco
  @deco("test")
  def spam(q):
    print(4)
 - 1, 2, 3, 4
 - 1, 2
 - 3, 4
 - 3, 4, 1, 2
What will this code print?
  def f1():
    print(1)
    yield "spam"
    print(2)
  def f2():
    print(3)
    return "ham"
    print(4)
  f1(); f2()
 - 1, 2, 3, 4
 - 1, 3, 2
 - 3
 - 1, 3
Python is often described as "executable pseudocode". Which of these is syntactically valid for a function you haven't finished writing yet? (Multiple correct answers)
 - def spaminate(n): ...
 - def spaminate(n): """Makes N spam to distribute"""
 - def spaminate(n): # TODO
 - def spaminate(n): <coming soon>
