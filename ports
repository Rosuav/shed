#!/usr/bin/env python3
import ast
import collections
import os
import re
import subprocess
import sys
p = subprocess.run(["ss", "-plun"], capture_output=True, encoding="utf-8")
if p.returncode:
	print(p.stdout)
	print(p.stderr, file=sys.stderr)
	sys.exit(p.returncode)
expectations = {
	27015: "srcds_linux:TF2",
	# 27016: "srcds_linux:CSGO", # Temporarily down
}
allowable = {27016: ["eu4"]}
error = 0
for line in p.stdout.split("\n"):
	line = line.split()
	if not line: continue # Blank line
	state, _, _, local, peer, *extra = line
	if state == "State": continue # Headers
	if not extra: continue # If there's no process info, we can't use this
	ip, port = local.rsplit(":", 1)
	if int(port) not in range(27010, 27020): continue # Focus on the processes holding ports in the 2701x range
	for info in extra:
		# Not sure how to properly parse these, so this is hacky.
		if info.startswith("users:"):
			expected = expectations.pop(int(port), None)
			# Hack: Parse it as if it's a tuple of tuples with assignments in them
			# It could be parsed as a call to evaluate but that requires a function.
			expr = ast.parse("[" + info.removeprefix("users:(").removesuffix(")").replace("=", ":=") + "]").body[0]
			assert isinstance(expr, ast.Expr) and isinstance(expr.value, ast.List)
			for tup in expr.value.elts:
				# Each of these represents one process that is holding this port, I think.
				assert isinstance(tup, ast.Tuple)
				info = { }
				positionals = ["procname"]
				for value in tup.elts:
					if isinstance(value, ast.NamedExpr):
						name = value.target.id
						value = value.value
					else:
						try: name = positionals.pop(0)
						except IndexError: name = "unknown%d" % (len(info) + 1)
					assert isinstance(value, ast.Constant)
					info[name] = value.value
				# Okay. So. I'm not really sure that cheating was any easier than doing it manually.
				# But whatever. We now have a basic info mapping.
				proc = info["procname"]
				# Perfect. Now, with process name and PID, figure out if it's allowed to have that port.
				if proc == "srcds_linux":
					# The same process name could be multiple different things, depending on its cwd.
					cwd = os.readlink("/proc/%d/cwd" % info["pid"])
					proc += ":" + {
						"/home/rosuav/tf2server/steamcmd_linux/tf2": "TF2",
						"/home/rosuav/tf2server/steamcmd_linux/csgo": "CSGO",
					}.get(cwd, cwd)
				# TODO: If there are multiple, should it be considered correct if any of them is the expected
				# one, or should it be considered incorrect if any is different? Currently it could be seen
				# to be both at once.
				if proc == expected: color = "\x1b[1;32m"
				elif expected is None: color = ""
				elif proc in allowable.get(int(port), []): color = "\x1b[1;33m"
				else:
					error = 1
					color = "\x1b[1;31m"
				print(port, color + proc + "\x1b[0m")
for port, expected in expectations.items():
	error = 1
	print(port, "\x1b[1;31mNOT RUNNING: " + expected + "\x1b[0m")

# Technically unrelated but worth checking, Steam can consume a lot of shared memory.
# Hypothesis: My weird issues with Chrome and other things have been caused by SHM leakage in Steam (or steamwebhelper).
# * The issues tend to be solved by a reboot
# * They are NOT solved by shutting down any single process
# * CPU, GPU, RAM, VRAM, etc, are never under threat.
# * There is a progressive and rather nasty slowdown of all manner of things
# * Steam creates a bunch of /dev/shm/u1000-Shm_???????? with a hex ID.
# * Shutting down Steam does NOT remove them all.
# * When I noticed issues one night, df showed that /dev/shm was nearly full. Most of that was those u1000-Shm files.
p = subprocess.run(["df", "/dev/shm"], capture_output=True, encoding="utf-8")
lines = p.stdout.split("\n")
if len(lines) < 2:
	print("\x1b[1;31mShMem Unable to determine\x1b[0m")
	error = 1
else:
	fs, size, used, avail, percent, mount = lines[1].split()
	p = int(percent.replace("%", ""))
	if p > 90: color = "\x1b[1;31m"
	elif p > 50: color = "\x1b[1;33m"
	elif p > 15: color = "\x1b[1m"
	else: color = "\x1b[1;32m"
	print("ShMem %s%s (%d files)\x1b[0m" % (color, percent, len(os.listdir("/dev/shm"))))

# Get some basic stats about processes
pids = [proc for proc in os.listdir("/proc") if set(proc) <= set("1234567890")]
status = collections.Counter()
for pid in pids:
	try:
		with open(f"/proc/{pid}/stat") as f:
			# Assumes that the process title is the only text string and thus the only place with parentheses.
			m = re.match(r"^[0-9]+ \((.*)\) (.*)", f.read())
			if not m: continue
			title = m.group(1)
			info = m.group(2).split()
			state, ppid, *_ = info
			status[state] += 1
			if state == "D" and "-v" in sys.argv:
				print(pid, "DiskSleep", title, "ppid", ppid)
	except FileNotFoundError: pass # Process must have terminated while we were searching
print("Procs", len(pids), f"({status['D']} D, {status['R']} R)")
sys.exit(error)
